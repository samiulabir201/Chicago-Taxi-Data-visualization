# -*- coding: utf-8 -*-
"""Analyzing Chicago Taxi Trips for Developing Strategic Enhancement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N19MTUnQlB_tDai09A0WmDV1kJrHrx1w

# Credentials to the runtime
"""

from google.colab import auth
auth.authenticate_user()
print('Authenticated')

import pandas as pd
from google.colab import files

"""## Data table display

Colab includes the ``google.colab.data_table`` package that can be used to display large pandas dataframes as an interactive data table.
It can be enabled with:
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext google.colab.data_table

"""# Using BigQuery

The `google.cloud.bigquery` library also includes a magic command which runs a query and either displays the result or saves it to a variable as a `DataFrame`.
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext google.cloud.bigquery

"""# Understanding the data

Let's run our first query to check the total number of rows in the dataset.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*) as total_rows
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`

"""Now let's find out the total number of non-blank rows for the `pickup_location` and `dropoff_location` columns, and total number of non-zero rows for the `trip_seconds` and `trip_miles` columns."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*) as total_rows
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE pickup_location IS NOT NULL



# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*) as total_rows
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE dropoff_location IS NOT NULL

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*) as total_rows
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE trip_seconds > 0

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*) as total_rows
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE trip_miles > 0

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*) as total_rows
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE pickup_location IS NOT NULL
# And dropoff_location IS NOT NULL
# And trip_seconds > 0
# And trip_miles > 0

"""Next, lets find out how many DISTINCT values we have for some of the categorical columns. Perhaps, this information will help us make informed decisions on selecting a subset from the dataset for further analysis."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(DISTINCT(company)) AS num_companies,
#   COUNT(DISTINCT(EXTRACT(YEAR FROM trip_start_timestamp))) AS num_years,
#   COUNT(DISTINCT(taxi_id)) AS num_taxis,
#   COUNT(DISTINCT(payment_type)) AS num_payment_types,
#   COUNT(DISTINCT(pickup_location)) AS num_pickup_locations,
#   COUNT(DISTINCT(dropoff_location)) AS num_dropoff_locations
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`

"""Does this mean we have 176 competitors? Far from it. Let’s write a simple query to understand this."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   company, COUNT(unique_key) as total_trips
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE EXTRACT(YEAR FROM trip_start_timestamp) = 2022
# GROUP BY company
# ORDER BY total_trips DESC
# LIMIT 10

"""Selecting only the 4 most recent years and only the 5 topmost competitors  brings the total number of rows down to only about 9.4 million. If we decide to be even more selective and pit only against the biggest competition like “Taxi Affiliation Services”, then the total number of rows become only about 14.6 million."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery --project sonic-trail-412817
# SELECT
#   COUNT(*)
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
#   AND pickup_location IS NOT NULL
#   And dropoff_location IS NOT NULL
#   And trip_seconds > 0
#   And trip_miles > 0

"""# Prepare analytic datasets

It is important to first look at the overall trends. This query gives the total number of taxi trips per year between 2019 and 2022.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_per_year --project sonic-trail-412817
# SELECT
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   COUNT(unique_key) as total_trips
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
# GROUP BY year
# ORDER BY total_trips DESC
#

trips_per_year

"""We also want to check how this trend for the top companies compare against the overall trend. Additionally, amongst top companies, we want to compare the yearly values of total number of taxis, average and total trip cost, average trip distance, average trip duration, and average tip received per trip.

As discussed in the previous subsection, some trips in the dataset have trip distance of 0 miles and some have trip duration of 0 seconds. Also, according to the dataset schema description for the `tip` column, “cash tips” have not been recorded in this dataset. Hence, we have to write separate queries with appropriate filters to extract the data in different DataFrames.

Lets first collect the total number of trips, total number of taxis, and average and total trip costs by `company` and `year`.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_per_year_company --project sonic-trail-412817
# SELECT
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   COUNT(unique_key) AS total_trips,
#   COUNT(DISTINCT(taxi_id)) AS total_taxis,
#   ROUND(AVG(trip_total), 2) AS avg_trip_cost,
#   ROUND(SUM(trip_total), 2) AS sum_trip_cost,
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
# GROUP BY year, company
# ORDER BY year DESC, total_trips DESC

trips_per_year_company

"""Next, we get the average trip duration by `company` and `year` for taxi trips having non-zero duration."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_seconds --project sonic-trail-412817
# SELECT
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   ROUND(AVG(trip_seconds), 2) AS avg_trip_seconds
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
#   AND trip_seconds > 0
# GROUP BY year, company
# ORDER BY year DESC, avg_trip_seconds DESC

trips_seconds

"""And, the average trip distance by `company` and `year` for taxi trips having non-zero distance."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_miles --project sonic-trail-412817
# SELECT
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   ROUND(AVG(trip_miles), 2) AS avg_trip_miles
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
#   AND trip_miles > 0
# GROUP BY year, company
# ORDER BY year DESC, avg_trip_miles DESC

trips_miles

"""Finally, the average tips by `company` and `year` for non-cash payments."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_tips --project foodpanda-exercises
# SELECT
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   ROUND(AVG(tips), 2) AS avg_tips
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
#   AND payment_type <> "Cash"
# GROUP BY year, company
# ORDER BY year DESC, avg_tips DESC

trips_tips

"""Since these 4 DataFrames hold data aggregated across the same 2 categories of `company` and `year`, joining them together into a single DataFrame will simplify things for the dashboard development step."""

trips_per_year_company = trips_per_year_company.merge(trips_miles, on=['year', 'company'], how='left')
trips_per_year_company = trips_per_year_company.merge(trips_seconds, on=['year', 'company'], how='left')
trips_per_year_company = trips_per_year_company.merge(trips_tips, on=['year', 'company'], how='left')

"""We calculate additional metrics from this DataFrame: `avg_trip_miles_per_minute, avg_trip_cost_per_minute, avg_trip_cost_per_mile, total_trips_per_taxi.`"""

trips_per_year_company['avg_trip_miles_per_minute'] = round(trips_per_year_company['avg_trip_miles'] / trips_per_year_company['avg_trip_seconds'] * 60, 2)
trips_per_year_company['avg_trip_cost_per_minute'] = round(trips_per_year_company['avg_trip_cost'] / trips_per_year_company['avg_trip_seconds'] * 60, 2)
trips_per_year_company['avg_trip_cost_per_mile'] = round(trips_per_year_company['avg_trip_cost'] / trips_per_year_company['avg_trip_miles'], 2)
trips_per_year_company['total_trips_per_taxi'] = round(trips_per_year_company['total_trips'] / trips_per_year_company['total_taxis'], 2)

trips_per_year_company

"""Different companies may provide different payment options for their customers. Using the following query, we retrieve the total number of payments by `company, year` and `payment_type`."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery payment_types --project sonic-trail-412817
# SELECT
#   COUNT(unique_key) AS total_payments,
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   payment_type
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
# GROUP BY year, company, payment_type
# ORDER BY year DESC, total_payments DESC

payment_types

"""Since our dataset is about taxi trips, analyzing location data can help reveal spatial and spatiotemporal patterns. We accumulate total number of trips by `company`, `year` and (`pickup_latitude`, `pickup_longitude`). We drop rows where pickup data is missing."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_per_pickup --project sonic-trail-412817
# SELECT
#   COUNT(unique_key) AS total_trips,
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   pickup_latitude AS latitude,
#   pickup_longitude AS longitude
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
#   AND pickup_latitude IS NOT NULL
#   AND pickup_longitude IS NOT NULL
# GROUP BY year, company, pickup_latitude, pickup_longitude
# ORDER BY year DESC, total_trips DESC

trips_per_pickup

"""And, we do the same for (`dropoff_latitude`, `dropoff_longitude`)."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_per_dropoff --project sonic-trail-412817
# SELECT
#   COUNT(unique_key) AS total_trips,
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   company,
#   dropoff_latitude AS latitude,
#   dropoff_longitude AS longitude
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
#   AND dropoff_latitude IS NOT NULL
#   AND dropoff_longitude IS NOT NULL
# GROUP BY year, company, dropoff_latitude, dropoff_longitude
# ORDER BY year DESC, total_trips DESC

trips_per_dropoff

"""Lastly, concatenate the pickup and dropoff DataFrames."""

trips_per_pickup['location_type'] = 'Pickup'
trips_per_dropoff['location_type'] = 'Dropoff'
trips_per_location = pd.concat([trips_per_pickup, trips_per_dropoff]).reset_index(drop=True)

trips_per_location

"""There could also be seasonal trends in the data. For further exploration, we extract the `trips_by_month` DataFrame."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_by_month --project sonic-trail-412817
# SELECT
#   COUNT(unique_key) AS total_trips,
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   EXTRACT(MONTH FROM TIMESTAMP_TRUNC(trip_start_timestamp, MONTH)) AS month,
#   company
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
# GROUP BY year, company, month
# ORDER BY year DESC, total_trips DESC

trips_by_month

"""Similar to seasonal trends, there could also be distinct trends in operating hours for different taxi companies in Chicago. Therefore, we put together this data in the `trips_by_date_hour` DataFrame."""

# Commented out IPython magic to ensure Python compatibility.
# %%bigquery trips_by_date_hour --project sonic-trail-412817
# SELECT
#   COUNT(unique_key) AS total_trips,
#   COUNT(DISTINCT(taxi_id)) AS total_taxis,
#   EXTRACT(YEAR FROM trip_start_timestamp) AS year,
#   EXTRACT(DATE FROM trip_start_timestamp) AS date,
#   EXTRACT(HOUR FROM TIMESTAMP_TRUNC(trip_start_timestamp, HOUR)) AS hour,
#   company
# FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
# WHERE company
#   IN (
#     "Taxi Affiliation Services",
#     "Chicago Carriage Cab Corp",
#     "Flash Cab",
#     "Choice Taxi Association",
#     "Sun Taxi"
#   )
#   AND EXTRACT(YEAR FROM trip_start_timestamp) BETWEEN 2019 AND 2022
# GROUP BY year, company, date, hour
# ORDER BY year DESC, total_trips DESC

"""Unlike `trips_by_month`, notice that for `trips_by_date_hour`, we have also grouped the trips by `DATE`. We have done this because we also want to find the average number of trips per taxi by `hour, year` and `company`."""

trips_by_date_hour = trips_by_date_hour.groupby(by=['year', 'hour', 'company']).mean().reset_index()
trips_by_date_hour['total_trips'] = round(trips_by_date_hour['total_trips'], 2)
trips_by_date_hour['total_taxis'] = round(trips_by_date_hour['total_taxis'], 2)
trips_by_date_hour = trips_by_date_hour.rename(columns={'total_trips': 'avg_number_of_trips', 'total_taxis': 'avg_number_of_taxis'})
trips_by_date_hour['avg_number_of_trips_per_taxi'] = round(trips_by_date_hour['avg_number_of_trips'] / trips_by_date_hour['avg_number_of_taxis'], 2)

trips_by_date_hour

"""Colab File link with view only permission: https://colab.research.google.com/drive/1N19MTUnQlB_tDai09A0WmDV1kJrHrx1w?usp=sharing

## Download the csv files
"""

trips_by_date_hour.to_csv('trips_by_hour.csv', index=None)
trips_per_year_company.to_csv('trips_by_year_company.csv', index=None)
trips_per_year.to_csv('trips_per_year.csv', index=None)
trips_per_location.to_csv('trips_per_location.csv', index=None)
payment_types.to_csv('payment_types.csv', index=None)
trips_by_month.to_csv('trips_by_month.csv', index=None)

# files.download("trips_by_hour.csv")
# files.download("trips_by_year_company.csv")
# files.download("trips_per_year.csv")
# files.download("trips_per_location.csv")
# files.download("payment_types.csv")
# files.download("trips_by_month.csv")